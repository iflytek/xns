// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package std

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd(in *jlexer.Lexer, out *U) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "A":
			out.A = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd(out *jwriter.Writer, in U) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix[1:])
		out.Int(int(in.A))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v U) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v U) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *U) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *U) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd(l, v)
}
func easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd1(in *jlexer.Lexer, out *Responses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dns":
			if in.IsNull() {
				in.Skip()
				out.Dns = nil
			} else {
				in.Delim('[')
				if out.Dns == nil {
					if !in.IsDelim(']') {
						out.Dns = make([]HostIps, 0, 1)
					} else {
						out.Dns = []HostIps{}
					}
				} else {
					out.Dns = (out.Dns)[:0]
				}
				for !in.IsDelim(']') {
					var v1 HostIps
					(v1).UnmarshalEasyJSON(in)
					out.Dns = append(out.Dns, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "client_ip":
			out.ClientIp = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd1(out *jwriter.Writer, in Responses) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dns\":"
		out.RawString(prefix[1:])
		if in.Dns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Dns {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"client_ip\":"
		out.RawString(prefix)
		out.String(string(in.ClientIp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Responses) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Responses) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Responses) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Responses) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd1(l, v)
}
func easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd2(in *jlexer.Lexer, out *Ip) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.Ip = string(in.String())
		case "port":
			out.Port = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd2(out *jwriter.Writer, in Ip) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ip))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ip) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ip) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ip) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ip) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd2(l, v)
}
func easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd3(in *jlexer.Lexer, out *HostIps) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "debug":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Debug = make(map[string]interface{})
				} else {
					out.Debug = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Debug)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "host":
			out.Host = string(in.String())
		case "ips":
			if in.IsNull() {
				in.Skip()
				out.Ips = nil
			} else {
				in.Delim('[')
				if out.Ips == nil {
					if !in.IsDelim(']') {
						out.Ips = make([]Ip, 0, 2)
					} else {
						out.Ips = []Ip{}
					}
				} else {
					out.Ips = (out.Ips)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Ip
					(v5).UnmarshalEasyJSON(in)
					out.Ips = append(out.Ips, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ttl":
			out.Ttl = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd3(out *jwriter.Writer, in HostIps) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Debug) != 0 {
		const prefix string = ",\"debug\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Debug {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if m, ok := v6Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v6Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v6Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"ips\":"
		out.RawString(prefix)
		if in.Ips == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Ips {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ttl\":"
		out.RawString(prefix)
		out.Int(int(in.Ttl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HostIps) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HostIps) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1cdebbeEncodeGitIflytekComAIaaSNameServerProtocolStd3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HostIps) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HostIps) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1cdebbeDecodeGitIflytekComAIaaSNameServerProtocolStd3(l, v)
}
