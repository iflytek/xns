package models

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"reflect"
	"strings"
	"testing"
	"text/template"
)

var tlp = `
{{range $e:=. -}}
表名：{{$e.Name}}
字段名称|描述
---|---
{{range $f:=$e.Fields -}}
{{$f.Name}}|{{$f.Desc}}{{println}}
{{- end }}
{{println}}
{{- end }}
`



func TestParseModels(t *testing.T) {
	mds := parseModels(Idc{}, ServerGroupRef{}, Pool{}, GroupPoolRef{}, Service{}, Route{}, Region{}, Province{}, City{})
	bs, _ := json.Marshal(mds)
	fmt.Println(string(bs))
	fmt.Println("sssss=>", strings.ToLower(""))
	f, err := os.Create(`../../docs/db.md`)
	if err != nil {
		panic(err)
	}
	template.Must(template.New("db").Parse(tlp)).Execute(f, mds)
}

func TestParseTable(t *testing.T) {
	fmt.Println(convert9("ServerGroupRef"))
}

func TestParseTable2(t *testing.T) {
	out, err := os.Create("../docs/create_table.sql")
	if err != nil {
		panic(err)
	}
	generateSqls([]model{
		{
			i:      Idc{},
		},
		{
			i:      Group{},
			extras: nil,
			opts: []string{"CONSTRAINT idc_id_fk FOREIGN KEY  (idc_id)  REFERENCES t_idc (id)"},
		},
		{
			i:      ServerGroupRef{},
			extras: nil,
			opts: []string{
				"CONSTRAINT group_id_fk FOREIGN KEY  (group_id)  REFERENCES t_group (id)",
				"constraint uk_server_ip_group_id unique(server_ip,group_id)",
			},
		},
		{
			i: Pool{},
		},
		{
			i: GroupPoolRef{},
			opts: []string{
				"CONSTRAINT pool_id_fk FOREIGN KEY  (pool_id)  REFERENCES t_pool (id)",
				"CONSTRAINT group_id_fk FOREIGN KEY  (group_id)  REFERENCES t_group (id)",
				"constraint uk_pool_id_group_id unique(pool_id,group_id)",
			},
		},
		{
			i: Service{},
		},
		{
			i: Route{},
			opts: []string{
				"CONSTRAINT service_id_fk FOREIGN KEY  (service_id)  REFERENCES t_service (id)",
			},
		},
		{
			i: Region{},
		},
		{
			i: Country{},
		},
		{
			i: Province{},
			opts: []string{
				"CONSTRAINT region_code_fk FOREIGN KEY  (region_code)  REFERENCES t_region (code)",
				"CONSTRAINT country_code_fk FOREIGN KEY  (country_code)  REFERENCES t_country (code)",
			},
		},
		{
			i: City{},
			opts: []string{
				"CONSTRAINT province_code_fk FOREIGN KEY  (province_code)  REFERENCES t_province (code)",
			},
		},
		{
			i: ClusterEvent{},
		},
		{
			i:CustomParamEnum{},
			opts: []string{
				"constraint uk_param_name_value unique(param_name,value)",
			},
		},
		{
			i: User{},
		},
	}, io.MultiWriter(os.Stdout, out))
}

func TestDropTable(t *testing.T) {
	tbs := []string{"t_cluster_event","t_city","t_province","t_region","t_route","t_service","t_group_pool_ref","t_pool","t_server_group_ref","t_group","t_server","t_idc","t_country","t_custom_param_enum"}
	for _, tb := range tbs {
		fmt.Println("drop table ",tb,";")
	}
}

type Type struct {
	Name  string
	Value string
}

/*
{{ range $t:=. }}
func(this $t.Name)String()string{
	return str.StringerOf($t.Value)
}
{{ end}}
// rsgid

*/

var stringerTlp = `package models

// this file is auto generated by _parse_test.go_TestStringer .
// do not edit it

import (
	"git.iflytek.com/AIaaS/nameServer/tools/str"
	"strconv"
	"fmt"
)
{{ range $t:=. }}
func(this {{$t.Name}})String()string{
	return str.StringerOf({{$t.Value}})
}
{{ end}}

func itoString(v interface{})string{
	stringer,ok := v.(fmt.Stringer)
	if ok{
		return stringer.String()
	}
	return fmt.Sprintf("%v",v)
}

`

func TestStringer(t *testing.T) {
	f, err := os.Create("models_string.go")
	if err != nil {
		panic(err)
	}
	tx := template.Must(template.New("stringer").Parse(stringerTlp))
	err = tx.Execute(f, genStringers( Idc{}, Group{}, ServerGroupRef{}, Pool{}, GroupPoolRef{},
		Route{}, Service{}, ClusterEvent{}, Region{}, Province{}, City{},CustomParamEnum{},Country{},User{}))
	if err != nil {
		panic(err)
	}
}

func TestSt(t *testing.T) {
	fmt.Println(Service{
		Base:   Base{},
		TTL:    5,
		PoolId: "sdfsdf",
	})
}
func genStringers(ts ...interface{}) (res []Type) {
	for _, t := range ts {
		typ := reflect.TypeOf(t)
		res = append(res, Type{
			Name:  typ.Name(),
			Value: strings.Join(generateStringer(typ), ","),
		})
	}
	return res
}

func generateStringer(t reflect.Type) (res []string) {
	switch t.Kind() {
	case reflect.Ptr:
		t = t.Elem()
		fallthrough
	case reflect.Struct:
		for i := 0; i < t.NumField(); i++ {
			ft := t.Field(i)
			if ft.Anonymous {
				tps := generateStringer(ft.Type)
				res = append(res, tps...)
				continue
			}
			tag := ft.Tag.Get("json")
			if tag == "" {
				tag = ft.Name
			}
			values := parseStringerValues(tag, ft.Name, ft.Type)
			if values != "" {
				res = append(res, values)
			}

		}
	}
	return res
}

func parseStringerValues(tag, name string, t reflect.Type) string {
	switch t.Kind() {
	case reflect.String:
		return fmt.Sprintf("\"%s\",string(this.%s)", tag, name)
	case reflect.Int, reflect.Int32, reflect.Int64, reflect.Int8, reflect.Uint, reflect.Uint16, reflect.Uint8, reflect.Uint32, reflect.Uint64:
		return fmt.Sprintf("\"%s\",strconv.Itoa(int(this.%s))", tag, name)
	case reflect.Bool:
		return fmt.Sprintf("\"%s\",strconv.FormatBool(this.%s)", tag, name)
	case reflect.Float64, reflect.Float32:
		return fmt.Sprintf("\"%s\",strconv.FormatFloat(this.%s,'b','-1',64)", tag, name)
	}
	return fmt.Sprintf("\"%s\",itoString(this.%s)", tag, name)
}


//
